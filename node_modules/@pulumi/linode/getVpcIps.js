"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getVpcIpsOutput = exports.getVpcIps = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Provides information about a list of Linode VPC IPs that match a set of filters.
 * For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-vpcs-ips).
 *
 * ## Example Usage
 *
 * The following example shows how one might use this data source to list VPC IPs.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as linode from "@pulumi/linode";
 *
 * const filtered_ips = linode.getVpcIps({
 *     filters: [{
 *         name: "address",
 *         values: ["10.0.0.0"],
 *     }],
 * });
 * export const vpcIps = filtered_ips.then(filtered_ips => filtered_ips.vpcIps);
 * ```
 *
 * One might also use this data source to list all VPC IPs in a specific VPC. The following example shows how to do this.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as linode from "@pulumi/linode";
 *
 * const specific_vpc_ips = linode.getVpcIps({
 *     vpcId: 123,
 * });
 * export const vpcIps = specific_vpc_ips.then(specific_vpc_ips => specific_vpc_ips.vpcIps);
 * ```
 *
 * By default, this data source retrieves only IPv4 addresses. To instead retrieve IPv6 addresses, the `ipv6` field should be set to true:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as linode from "@pulumi/linode";
 *
 * const all_vpc_ipv6 = linode.getVpcIps({
 *     ipv6: true,
 * });
 * ```
 *
 * ## Filterable Fields
 *
 * * `active`
 *
 * * `configId`
 *
 * * `linodeId`
 *
 * * `region`
 *
 * * `vpcId`
 */
function getVpcIps(args, opts) {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("linode:index/getVpcIps:getVpcIps", {
        "filters": args.filters,
        "ipv6": args.ipv6,
        "vpcId": args.vpcId,
        "vpcIps": args.vpcIps,
    }, opts);
}
exports.getVpcIps = getVpcIps;
/**
 * Provides information about a list of Linode VPC IPs that match a set of filters.
 * For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-vpcs-ips).
 *
 * ## Example Usage
 *
 * The following example shows how one might use this data source to list VPC IPs.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as linode from "@pulumi/linode";
 *
 * const filtered_ips = linode.getVpcIps({
 *     filters: [{
 *         name: "address",
 *         values: ["10.0.0.0"],
 *     }],
 * });
 * export const vpcIps = filtered_ips.then(filtered_ips => filtered_ips.vpcIps);
 * ```
 *
 * One might also use this data source to list all VPC IPs in a specific VPC. The following example shows how to do this.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as linode from "@pulumi/linode";
 *
 * const specific_vpc_ips = linode.getVpcIps({
 *     vpcId: 123,
 * });
 * export const vpcIps = specific_vpc_ips.then(specific_vpc_ips => specific_vpc_ips.vpcIps);
 * ```
 *
 * By default, this data source retrieves only IPv4 addresses. To instead retrieve IPv6 addresses, the `ipv6` field should be set to true:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as linode from "@pulumi/linode";
 *
 * const all_vpc_ipv6 = linode.getVpcIps({
 *     ipv6: true,
 * });
 * ```
 *
 * ## Filterable Fields
 *
 * * `active`
 *
 * * `configId`
 *
 * * `linodeId`
 *
 * * `region`
 *
 * * `vpcId`
 */
function getVpcIpsOutput(args, opts) {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("linode:index/getVpcIps:getVpcIps", {
        "filters": args.filters,
        "ipv6": args.ipv6,
        "vpcId": args.vpcId,
        "vpcIps": args.vpcIps,
    }, opts);
}
exports.getVpcIpsOutput = getVpcIpsOutput;
//# sourceMappingURL=getVpcIps.js.map