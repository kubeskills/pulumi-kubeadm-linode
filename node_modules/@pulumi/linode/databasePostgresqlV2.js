"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatabasePostgresqlV2 = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Provides a Linode PostgreSQL Database resource. This can be used to create, modify, and delete Linode PostgreSQL Databases.
 * For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/post-databases-postgre-sql-instances).
 *
 * Please keep in mind that Managed Databases can take up to half an hour to provision.
 *
 * ## Example Usage
 *
 * Creating a simple PostgreSQL database that does not allow connections:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as linode from "@pulumi/linode";
 *
 * const foobar = new linode.DatabasePostgresqlV2("foobar", {
 *     label: "mydatabase",
 *     engineId: "postgresql/16",
 *     region: "us-mia",
 *     type: "g6-nanode-1",
 * });
 * ```
 *
 * Creating a simple PostgreSQL database that allows connections from all IPv4 addresses:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as linode from "@pulumi/linode";
 *
 * const foobar = new linode.DatabasePostgresqlV2("foobar", {
 *     label: "mydatabase",
 *     engineId: "postgresql/16",
 *     region: "us-mia",
 *     type: "g6-nanode-1",
 *     allowLists: ["0.0.0.0/0"],
 * });
 * ```
 *
 * Creating a complex PostgreSQL database:
 *
 * ## Import
 *
 * Linode PostgreSQL Databases can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import linode:index/databasePostgresqlV2:DatabasePostgresqlV2 foobar 1234567
 * ```
 */
class DatabasePostgresqlV2 extends pulumi.CustomResource {
    /**
     * Get an existing DatabasePostgresqlV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new DatabasePostgresqlV2(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of DatabasePostgresqlV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabasePostgresqlV2.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["allowLists"] = state?.allowLists;
            resourceInputs["caCert"] = state?.caCert;
            resourceInputs["clusterSize"] = state?.clusterSize;
            resourceInputs["created"] = state?.created;
            resourceInputs["encrypted"] = state?.encrypted;
            resourceInputs["engine"] = state?.engine;
            resourceInputs["engineConfigPgAutovacuumAnalyzeScaleFactor"] = state?.engineConfigPgAutovacuumAnalyzeScaleFactor;
            resourceInputs["engineConfigPgAutovacuumAnalyzeThreshold"] = state?.engineConfigPgAutovacuumAnalyzeThreshold;
            resourceInputs["engineConfigPgAutovacuumMaxWorkers"] = state?.engineConfigPgAutovacuumMaxWorkers;
            resourceInputs["engineConfigPgAutovacuumNaptime"] = state?.engineConfigPgAutovacuumNaptime;
            resourceInputs["engineConfigPgAutovacuumVacuumCostDelay"] = state?.engineConfigPgAutovacuumVacuumCostDelay;
            resourceInputs["engineConfigPgAutovacuumVacuumCostLimit"] = state?.engineConfigPgAutovacuumVacuumCostLimit;
            resourceInputs["engineConfigPgAutovacuumVacuumScaleFactor"] = state?.engineConfigPgAutovacuumVacuumScaleFactor;
            resourceInputs["engineConfigPgAutovacuumVacuumThreshold"] = state?.engineConfigPgAutovacuumVacuumThreshold;
            resourceInputs["engineConfigPgBgwriterDelay"] = state?.engineConfigPgBgwriterDelay;
            resourceInputs["engineConfigPgBgwriterFlushAfter"] = state?.engineConfigPgBgwriterFlushAfter;
            resourceInputs["engineConfigPgBgwriterLruMaxpages"] = state?.engineConfigPgBgwriterLruMaxpages;
            resourceInputs["engineConfigPgBgwriterLruMultiplier"] = state?.engineConfigPgBgwriterLruMultiplier;
            resourceInputs["engineConfigPgDeadlockTimeout"] = state?.engineConfigPgDeadlockTimeout;
            resourceInputs["engineConfigPgDefaultToastCompression"] = state?.engineConfigPgDefaultToastCompression;
            resourceInputs["engineConfigPgIdleInTransactionSessionTimeout"] = state?.engineConfigPgIdleInTransactionSessionTimeout;
            resourceInputs["engineConfigPgJit"] = state?.engineConfigPgJit;
            resourceInputs["engineConfigPgMaxFilesPerProcess"] = state?.engineConfigPgMaxFilesPerProcess;
            resourceInputs["engineConfigPgMaxLocksPerTransaction"] = state?.engineConfigPgMaxLocksPerTransaction;
            resourceInputs["engineConfigPgMaxLogicalReplicationWorkers"] = state?.engineConfigPgMaxLogicalReplicationWorkers;
            resourceInputs["engineConfigPgMaxParallelWorkers"] = state?.engineConfigPgMaxParallelWorkers;
            resourceInputs["engineConfigPgMaxParallelWorkersPerGather"] = state?.engineConfigPgMaxParallelWorkersPerGather;
            resourceInputs["engineConfigPgMaxPredLocksPerTransaction"] = state?.engineConfigPgMaxPredLocksPerTransaction;
            resourceInputs["engineConfigPgMaxReplicationSlots"] = state?.engineConfigPgMaxReplicationSlots;
            resourceInputs["engineConfigPgMaxSlotWalKeepSize"] = state?.engineConfigPgMaxSlotWalKeepSize;
            resourceInputs["engineConfigPgMaxStackDepth"] = state?.engineConfigPgMaxStackDepth;
            resourceInputs["engineConfigPgMaxStandbyArchiveDelay"] = state?.engineConfigPgMaxStandbyArchiveDelay;
            resourceInputs["engineConfigPgMaxStandbyStreamingDelay"] = state?.engineConfigPgMaxStandbyStreamingDelay;
            resourceInputs["engineConfigPgMaxWalSenders"] = state?.engineConfigPgMaxWalSenders;
            resourceInputs["engineConfigPgMaxWorkerProcesses"] = state?.engineConfigPgMaxWorkerProcesses;
            resourceInputs["engineConfigPgPasswordEncryption"] = state?.engineConfigPgPasswordEncryption;
            resourceInputs["engineConfigPgPgPartmanBgwInterval"] = state?.engineConfigPgPgPartmanBgwInterval;
            resourceInputs["engineConfigPgPgPartmanBgwRole"] = state?.engineConfigPgPgPartmanBgwRole;
            resourceInputs["engineConfigPgPgStatMonitorPgsmEnableQueryPlan"] = state?.engineConfigPgPgStatMonitorPgsmEnableQueryPlan;
            resourceInputs["engineConfigPgPgStatMonitorPgsmMaxBuckets"] = state?.engineConfigPgPgStatMonitorPgsmMaxBuckets;
            resourceInputs["engineConfigPgPgStatStatementsTrack"] = state?.engineConfigPgPgStatStatementsTrack;
            resourceInputs["engineConfigPgStatMonitorEnable"] = state?.engineConfigPgStatMonitorEnable;
            resourceInputs["engineConfigPgTempFileLimit"] = state?.engineConfigPgTempFileLimit;
            resourceInputs["engineConfigPgTimezone"] = state?.engineConfigPgTimezone;
            resourceInputs["engineConfigPgTrackActivityQuerySize"] = state?.engineConfigPgTrackActivityQuerySize;
            resourceInputs["engineConfigPgTrackCommitTimestamp"] = state?.engineConfigPgTrackCommitTimestamp;
            resourceInputs["engineConfigPgTrackFunctions"] = state?.engineConfigPgTrackFunctions;
            resourceInputs["engineConfigPgTrackIoTiming"] = state?.engineConfigPgTrackIoTiming;
            resourceInputs["engineConfigPgWalSenderTimeout"] = state?.engineConfigPgWalSenderTimeout;
            resourceInputs["engineConfigPgWalWriterDelay"] = state?.engineConfigPgWalWriterDelay;
            resourceInputs["engineConfigPglookoutMaxFailoverReplicationTimeLag"] = state?.engineConfigPglookoutMaxFailoverReplicationTimeLag;
            resourceInputs["engineConfigSharedBuffersPercentage"] = state?.engineConfigSharedBuffersPercentage;
            resourceInputs["engineConfigWorkMem"] = state?.engineConfigWorkMem;
            resourceInputs["engineId"] = state?.engineId;
            resourceInputs["forkRestoreTime"] = state?.forkRestoreTime;
            resourceInputs["forkSource"] = state?.forkSource;
            resourceInputs["hostPrimary"] = state?.hostPrimary;
            resourceInputs["hostSecondary"] = state?.hostSecondary;
            resourceInputs["label"] = state?.label;
            resourceInputs["members"] = state?.members;
            resourceInputs["oldestRestoreTime"] = state?.oldestRestoreTime;
            resourceInputs["pendingUpdates"] = state?.pendingUpdates;
            resourceInputs["platform"] = state?.platform;
            resourceInputs["port"] = state?.port;
            resourceInputs["privateNetwork"] = state?.privateNetwork;
            resourceInputs["region"] = state?.region;
            resourceInputs["rootPassword"] = state?.rootPassword;
            resourceInputs["rootUsername"] = state?.rootUsername;
            resourceInputs["sslConnection"] = state?.sslConnection;
            resourceInputs["status"] = state?.status;
            resourceInputs["suspended"] = state?.suspended;
            resourceInputs["timeouts"] = state?.timeouts;
            resourceInputs["type"] = state?.type;
            resourceInputs["updated"] = state?.updated;
            resourceInputs["updates"] = state?.updates;
            resourceInputs["version"] = state?.version;
        }
        else {
            const args = argsOrState;
            if (args?.engineId === undefined && !opts.urn) {
                throw new Error("Missing required property 'engineId'");
            }
            if (args?.label === undefined && !opts.urn) {
                throw new Error("Missing required property 'label'");
            }
            if (args?.region === undefined && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["allowLists"] = args?.allowLists;
            resourceInputs["clusterSize"] = args?.clusterSize;
            resourceInputs["engineConfigPgAutovacuumAnalyzeScaleFactor"] = args?.engineConfigPgAutovacuumAnalyzeScaleFactor;
            resourceInputs["engineConfigPgAutovacuumAnalyzeThreshold"] = args?.engineConfigPgAutovacuumAnalyzeThreshold;
            resourceInputs["engineConfigPgAutovacuumMaxWorkers"] = args?.engineConfigPgAutovacuumMaxWorkers;
            resourceInputs["engineConfigPgAutovacuumNaptime"] = args?.engineConfigPgAutovacuumNaptime;
            resourceInputs["engineConfigPgAutovacuumVacuumCostDelay"] = args?.engineConfigPgAutovacuumVacuumCostDelay;
            resourceInputs["engineConfigPgAutovacuumVacuumCostLimit"] = args?.engineConfigPgAutovacuumVacuumCostLimit;
            resourceInputs["engineConfigPgAutovacuumVacuumScaleFactor"] = args?.engineConfigPgAutovacuumVacuumScaleFactor;
            resourceInputs["engineConfigPgAutovacuumVacuumThreshold"] = args?.engineConfigPgAutovacuumVacuumThreshold;
            resourceInputs["engineConfigPgBgwriterDelay"] = args?.engineConfigPgBgwriterDelay;
            resourceInputs["engineConfigPgBgwriterFlushAfter"] = args?.engineConfigPgBgwriterFlushAfter;
            resourceInputs["engineConfigPgBgwriterLruMaxpages"] = args?.engineConfigPgBgwriterLruMaxpages;
            resourceInputs["engineConfigPgBgwriterLruMultiplier"] = args?.engineConfigPgBgwriterLruMultiplier;
            resourceInputs["engineConfigPgDeadlockTimeout"] = args?.engineConfigPgDeadlockTimeout;
            resourceInputs["engineConfigPgDefaultToastCompression"] = args?.engineConfigPgDefaultToastCompression;
            resourceInputs["engineConfigPgIdleInTransactionSessionTimeout"] = args?.engineConfigPgIdleInTransactionSessionTimeout;
            resourceInputs["engineConfigPgJit"] = args?.engineConfigPgJit;
            resourceInputs["engineConfigPgMaxFilesPerProcess"] = args?.engineConfigPgMaxFilesPerProcess;
            resourceInputs["engineConfigPgMaxLocksPerTransaction"] = args?.engineConfigPgMaxLocksPerTransaction;
            resourceInputs["engineConfigPgMaxLogicalReplicationWorkers"] = args?.engineConfigPgMaxLogicalReplicationWorkers;
            resourceInputs["engineConfigPgMaxParallelWorkers"] = args?.engineConfigPgMaxParallelWorkers;
            resourceInputs["engineConfigPgMaxParallelWorkersPerGather"] = args?.engineConfigPgMaxParallelWorkersPerGather;
            resourceInputs["engineConfigPgMaxPredLocksPerTransaction"] = args?.engineConfigPgMaxPredLocksPerTransaction;
            resourceInputs["engineConfigPgMaxReplicationSlots"] = args?.engineConfigPgMaxReplicationSlots;
            resourceInputs["engineConfigPgMaxSlotWalKeepSize"] = args?.engineConfigPgMaxSlotWalKeepSize;
            resourceInputs["engineConfigPgMaxStackDepth"] = args?.engineConfigPgMaxStackDepth;
            resourceInputs["engineConfigPgMaxStandbyArchiveDelay"] = args?.engineConfigPgMaxStandbyArchiveDelay;
            resourceInputs["engineConfigPgMaxStandbyStreamingDelay"] = args?.engineConfigPgMaxStandbyStreamingDelay;
            resourceInputs["engineConfigPgMaxWalSenders"] = args?.engineConfigPgMaxWalSenders;
            resourceInputs["engineConfigPgMaxWorkerProcesses"] = args?.engineConfigPgMaxWorkerProcesses;
            resourceInputs["engineConfigPgPasswordEncryption"] = args?.engineConfigPgPasswordEncryption;
            resourceInputs["engineConfigPgPgPartmanBgwInterval"] = args?.engineConfigPgPgPartmanBgwInterval;
            resourceInputs["engineConfigPgPgPartmanBgwRole"] = args?.engineConfigPgPgPartmanBgwRole;
            resourceInputs["engineConfigPgPgStatMonitorPgsmEnableQueryPlan"] = args?.engineConfigPgPgStatMonitorPgsmEnableQueryPlan;
            resourceInputs["engineConfigPgPgStatMonitorPgsmMaxBuckets"] = args?.engineConfigPgPgStatMonitorPgsmMaxBuckets;
            resourceInputs["engineConfigPgPgStatStatementsTrack"] = args?.engineConfigPgPgStatStatementsTrack;
            resourceInputs["engineConfigPgStatMonitorEnable"] = args?.engineConfigPgStatMonitorEnable;
            resourceInputs["engineConfigPgTempFileLimit"] = args?.engineConfigPgTempFileLimit;
            resourceInputs["engineConfigPgTimezone"] = args?.engineConfigPgTimezone;
            resourceInputs["engineConfigPgTrackActivityQuerySize"] = args?.engineConfigPgTrackActivityQuerySize;
            resourceInputs["engineConfigPgTrackCommitTimestamp"] = args?.engineConfigPgTrackCommitTimestamp;
            resourceInputs["engineConfigPgTrackFunctions"] = args?.engineConfigPgTrackFunctions;
            resourceInputs["engineConfigPgTrackIoTiming"] = args?.engineConfigPgTrackIoTiming;
            resourceInputs["engineConfigPgWalSenderTimeout"] = args?.engineConfigPgWalSenderTimeout;
            resourceInputs["engineConfigPgWalWriterDelay"] = args?.engineConfigPgWalWriterDelay;
            resourceInputs["engineConfigPglookoutMaxFailoverReplicationTimeLag"] = args?.engineConfigPglookoutMaxFailoverReplicationTimeLag;
            resourceInputs["engineConfigSharedBuffersPercentage"] = args?.engineConfigSharedBuffersPercentage;
            resourceInputs["engineConfigWorkMem"] = args?.engineConfigWorkMem;
            resourceInputs["engineId"] = args?.engineId;
            resourceInputs["forkRestoreTime"] = args?.forkRestoreTime;
            resourceInputs["forkSource"] = args?.forkSource;
            resourceInputs["label"] = args?.label;
            resourceInputs["privateNetwork"] = args?.privateNetwork;
            resourceInputs["region"] = args?.region;
            resourceInputs["suspended"] = args?.suspended;
            resourceInputs["timeouts"] = args?.timeouts;
            resourceInputs["type"] = args?.type;
            resourceInputs["updates"] = args?.updates;
            resourceInputs["caCert"] = undefined /*out*/;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["encrypted"] = undefined /*out*/;
            resourceInputs["engine"] = undefined /*out*/;
            resourceInputs["hostPrimary"] = undefined /*out*/;
            resourceInputs["hostSecondary"] = undefined /*out*/;
            resourceInputs["members"] = undefined /*out*/;
            resourceInputs["oldestRestoreTime"] = undefined /*out*/;
            resourceInputs["pendingUpdates"] = undefined /*out*/;
            resourceInputs["platform"] = undefined /*out*/;
            resourceInputs["port"] = undefined /*out*/;
            resourceInputs["rootPassword"] = undefined /*out*/;
            resourceInputs["rootUsername"] = undefined /*out*/;
            resourceInputs["sslConnection"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updated"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["caCert", "rootPassword", "rootUsername"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(DatabasePostgresqlV2.__pulumiType, name, resourceInputs, opts);
    }
}
exports.DatabasePostgresqlV2 = DatabasePostgresqlV2;
/** @internal */
DatabasePostgresqlV2.__pulumiType = 'linode:index/databasePostgresqlV2:DatabasePostgresqlV2';
//# sourceMappingURL=databasePostgresqlV2.js.map