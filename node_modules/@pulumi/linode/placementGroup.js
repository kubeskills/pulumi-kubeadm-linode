"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlacementGroup = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Manages a Linode Placement Group.
 * For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/post-placement-group).
 *
 * ## Example Usage
 *
 * Create a Placement Group with the local anti-affinity policy:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as linode from "@pulumi/linode";
 *
 * const test = new linode.PlacementGroup("test", {
 *     label: "my-placement-group",
 *     region: "us-mia",
 *     placementGroupType: "anti_affinity:local",
 * });
 * ```
 *
 * ## Import
 *
 * Placement Groups be imported using their unique `id`, e.g.
 *
 * ```sh
 * $ pulumi import linode:index/placementGroup:PlacementGroup mygroup 1234567
 * ```
 */
class PlacementGroup extends pulumi.CustomResource {
    /**
     * Get an existing PlacementGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new PlacementGroup(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of PlacementGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PlacementGroup.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["isCompliant"] = state?.isCompliant;
            resourceInputs["label"] = state?.label;
            resourceInputs["members"] = state?.members;
            resourceInputs["placementGroupPolicy"] = state?.placementGroupPolicy;
            resourceInputs["placementGroupType"] = state?.placementGroupType;
            resourceInputs["region"] = state?.region;
        }
        else {
            const args = argsOrState;
            if (args?.label === undefined && !opts.urn) {
                throw new Error("Missing required property 'label'");
            }
            if (args?.placementGroupType === undefined && !opts.urn) {
                throw new Error("Missing required property 'placementGroupType'");
            }
            if (args?.region === undefined && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            resourceInputs["label"] = args?.label;
            resourceInputs["placementGroupPolicy"] = args?.placementGroupPolicy;
            resourceInputs["placementGroupType"] = args?.placementGroupType;
            resourceInputs["region"] = args?.region;
            resourceInputs["isCompliant"] = undefined /*out*/;
            resourceInputs["members"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PlacementGroup.__pulumiType, name, resourceInputs, opts);
    }
}
exports.PlacementGroup = PlacementGroup;
/** @internal */
PlacementGroup.__pulumiType = 'linode:index/placementGroup:PlacementGroup';
//# sourceMappingURL=placementGroup.js.map