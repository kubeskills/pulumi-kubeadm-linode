"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ipv6Range = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as linode from "@pulumi/linode";
 *
 * const foobar = new linode.Instance("foobar", {
 *     label: "my-linode",
 *     image: "linode/alpine3.19",
 *     type: "g6-nanode-1",
 *     region: "us-southeast",
 * });
 * const foobarIpv6Range = new linode.Ipv6Range("foobar", {
 *     linodeId: foobar.id,
 *     prefixLength: 64,
 * });
 * ```
 */
class Ipv6Range extends pulumi.CustomResource {
    /**
     * Get an existing Ipv6Range resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Ipv6Range(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of Ipv6Range.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ipv6Range.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["isBgp"] = state?.isBgp;
            resourceInputs["linodeId"] = state?.linodeId;
            resourceInputs["linodes"] = state?.linodes;
            resourceInputs["prefixLength"] = state?.prefixLength;
            resourceInputs["range"] = state?.range;
            resourceInputs["region"] = state?.region;
            resourceInputs["routeTarget"] = state?.routeTarget;
        }
        else {
            const args = argsOrState;
            if (args?.prefixLength === undefined && !opts.urn) {
                throw new Error("Missing required property 'prefixLength'");
            }
            resourceInputs["linodeId"] = args?.linodeId;
            resourceInputs["prefixLength"] = args?.prefixLength;
            resourceInputs["routeTarget"] = args?.routeTarget;
            resourceInputs["isBgp"] = undefined /*out*/;
            resourceInputs["linodes"] = undefined /*out*/;
            resourceInputs["range"] = undefined /*out*/;
            resourceInputs["region"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ipv6Range.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Ipv6Range = Ipv6Range;
/** @internal */
Ipv6Range.__pulumiType = 'linode:index/ipv6Range:Ipv6Range';
//# sourceMappingURL=ipv6Range.js.map