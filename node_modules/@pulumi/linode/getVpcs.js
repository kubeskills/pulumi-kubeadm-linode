"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getVpcsOutput = exports.getVpcs = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Provides information about a list of Linode VPCs that match a set of filters.
 * For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-vpcs).
 *
 * ## Example Usage
 *
 * The following example shows how one might use this data source to list VPCs.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as linode from "@pulumi/linode";
 *
 * const filtered_vpcs = linode.getVpcs({
 *     filters: [{
 *         name: "label",
 *         values: ["test"],
 *     }],
 * });
 * export const vpcs = filtered_vpcs.then(filtered_vpcs => filtered_vpcs.vpcs);
 * ```
 *
 * ## IPv6
 *
 * > **Limited Availability** IPv6 VPCs may not currently be available to all users.
 *
 * Contains information about a single IPv6 allocation under a VPC.
 *
 * * `range` - The allocated range in CIDR format.
 *
 * ## Filterable Fields
 *
 * * `id`
 *
 * * `label`
 *
 * * `description`
 *
 * * `region`
 */
function getVpcs(args, opts) {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("linode:index/getVpcs:getVpcs", {
        "filters": args.filters,
        "vpcs": args.vpcs,
    }, opts);
}
exports.getVpcs = getVpcs;
/**
 * Provides information about a list of Linode VPCs that match a set of filters.
 * For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-vpcs).
 *
 * ## Example Usage
 *
 * The following example shows how one might use this data source to list VPCs.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as linode from "@pulumi/linode";
 *
 * const filtered_vpcs = linode.getVpcs({
 *     filters: [{
 *         name: "label",
 *         values: ["test"],
 *     }],
 * });
 * export const vpcs = filtered_vpcs.then(filtered_vpcs => filtered_vpcs.vpcs);
 * ```
 *
 * ## IPv6
 *
 * > **Limited Availability** IPv6 VPCs may not currently be available to all users.
 *
 * Contains information about a single IPv6 allocation under a VPC.
 *
 * * `range` - The allocated range in CIDR format.
 *
 * ## Filterable Fields
 *
 * * `id`
 *
 * * `label`
 *
 * * `description`
 *
 * * `region`
 */
function getVpcsOutput(args, opts) {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("linode:index/getVpcs:getVpcs", {
        "filters": args.filters,
        "vpcs": args.vpcs,
    }, opts);
}
exports.getVpcsOutput = getVpcsOutput;
//# sourceMappingURL=getVpcs.js.map