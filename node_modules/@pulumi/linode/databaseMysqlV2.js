"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatabaseMysqlV2 = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Provides a Linode MySQL Database resource. This can be used to create, modify, and delete Linode MySQL Databases.
 * For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/post-databases-mysql-instances).
 *
 * Please keep in mind that Managed Databases can take up to half an hour to provision.
 *
 * ## Example Usage
 *
 * Creating a simple MySQL database that does not allow connections:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as linode from "@pulumi/linode";
 *
 * const foobar = new linode.DatabaseMysqlV2("foobar", {
 *     label: "mydatabase",
 *     engineId: "mysql/8",
 *     region: "us-mia",
 *     type: "g6-nanode-1",
 * });
 * ```
 *
 * Creating a simple MySQL database that allows connections from all IPv4 addresses:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as linode from "@pulumi/linode";
 *
 * const foobar = new linode.DatabaseMysqlV2("foobar", {
 *     label: "mydatabase",
 *     engineId: "mysql/8",
 *     region: "us-mia",
 *     type: "g6-nanode-1",
 *     allowLists: ["0.0.0.0/0"],
 * });
 * ```
 *
 * Creating a complex MySQL database:
 *
 * ## Import
 *
 * Linode MySQL Databases can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import linode:index/databaseMysqlV2:DatabaseMysqlV2 foobar 1234567
 * ```
 */
class DatabaseMysqlV2 extends pulumi.CustomResource {
    /**
     * Get an existing DatabaseMysqlV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new DatabaseMysqlV2(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of DatabaseMysqlV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabaseMysqlV2.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["allowLists"] = state?.allowLists;
            resourceInputs["caCert"] = state?.caCert;
            resourceInputs["clusterSize"] = state?.clusterSize;
            resourceInputs["created"] = state?.created;
            resourceInputs["encrypted"] = state?.encrypted;
            resourceInputs["engine"] = state?.engine;
            resourceInputs["engineConfigBinlogRetentionPeriod"] = state?.engineConfigBinlogRetentionPeriod;
            resourceInputs["engineConfigMysqlConnectTimeout"] = state?.engineConfigMysqlConnectTimeout;
            resourceInputs["engineConfigMysqlDefaultTimeZone"] = state?.engineConfigMysqlDefaultTimeZone;
            resourceInputs["engineConfigMysqlGroupConcatMaxLen"] = state?.engineConfigMysqlGroupConcatMaxLen;
            resourceInputs["engineConfigMysqlInformationSchemaStatsExpiry"] = state?.engineConfigMysqlInformationSchemaStatsExpiry;
            resourceInputs["engineConfigMysqlInnodbChangeBufferMaxSize"] = state?.engineConfigMysqlInnodbChangeBufferMaxSize;
            resourceInputs["engineConfigMysqlInnodbFlushNeighbors"] = state?.engineConfigMysqlInnodbFlushNeighbors;
            resourceInputs["engineConfigMysqlInnodbFtMinTokenSize"] = state?.engineConfigMysqlInnodbFtMinTokenSize;
            resourceInputs["engineConfigMysqlInnodbFtServerStopwordTable"] = state?.engineConfigMysqlInnodbFtServerStopwordTable;
            resourceInputs["engineConfigMysqlInnodbLockWaitTimeout"] = state?.engineConfigMysqlInnodbLockWaitTimeout;
            resourceInputs["engineConfigMysqlInnodbLogBufferSize"] = state?.engineConfigMysqlInnodbLogBufferSize;
            resourceInputs["engineConfigMysqlInnodbOnlineAlterLogMaxSize"] = state?.engineConfigMysqlInnodbOnlineAlterLogMaxSize;
            resourceInputs["engineConfigMysqlInnodbReadIoThreads"] = state?.engineConfigMysqlInnodbReadIoThreads;
            resourceInputs["engineConfigMysqlInnodbRollbackOnTimeout"] = state?.engineConfigMysqlInnodbRollbackOnTimeout;
            resourceInputs["engineConfigMysqlInnodbThreadConcurrency"] = state?.engineConfigMysqlInnodbThreadConcurrency;
            resourceInputs["engineConfigMysqlInnodbWriteIoThreads"] = state?.engineConfigMysqlInnodbWriteIoThreads;
            resourceInputs["engineConfigMysqlInteractiveTimeout"] = state?.engineConfigMysqlInteractiveTimeout;
            resourceInputs["engineConfigMysqlInternalTmpMemStorageEngine"] = state?.engineConfigMysqlInternalTmpMemStorageEngine;
            resourceInputs["engineConfigMysqlMaxAllowedPacket"] = state?.engineConfigMysqlMaxAllowedPacket;
            resourceInputs["engineConfigMysqlMaxHeapTableSize"] = state?.engineConfigMysqlMaxHeapTableSize;
            resourceInputs["engineConfigMysqlNetBufferLength"] = state?.engineConfigMysqlNetBufferLength;
            resourceInputs["engineConfigMysqlNetReadTimeout"] = state?.engineConfigMysqlNetReadTimeout;
            resourceInputs["engineConfigMysqlNetWriteTimeout"] = state?.engineConfigMysqlNetWriteTimeout;
            resourceInputs["engineConfigMysqlSortBufferSize"] = state?.engineConfigMysqlSortBufferSize;
            resourceInputs["engineConfigMysqlSqlMode"] = state?.engineConfigMysqlSqlMode;
            resourceInputs["engineConfigMysqlSqlRequirePrimaryKey"] = state?.engineConfigMysqlSqlRequirePrimaryKey;
            resourceInputs["engineConfigMysqlTmpTableSize"] = state?.engineConfigMysqlTmpTableSize;
            resourceInputs["engineConfigMysqlWaitTimeout"] = state?.engineConfigMysqlWaitTimeout;
            resourceInputs["engineId"] = state?.engineId;
            resourceInputs["forkRestoreTime"] = state?.forkRestoreTime;
            resourceInputs["forkSource"] = state?.forkSource;
            resourceInputs["hostPrimary"] = state?.hostPrimary;
            resourceInputs["hostSecondary"] = state?.hostSecondary;
            resourceInputs["label"] = state?.label;
            resourceInputs["members"] = state?.members;
            resourceInputs["oldestRestoreTime"] = state?.oldestRestoreTime;
            resourceInputs["pendingUpdates"] = state?.pendingUpdates;
            resourceInputs["platform"] = state?.platform;
            resourceInputs["port"] = state?.port;
            resourceInputs["privateNetwork"] = state?.privateNetwork;
            resourceInputs["region"] = state?.region;
            resourceInputs["rootPassword"] = state?.rootPassword;
            resourceInputs["rootUsername"] = state?.rootUsername;
            resourceInputs["sslConnection"] = state?.sslConnection;
            resourceInputs["status"] = state?.status;
            resourceInputs["suspended"] = state?.suspended;
            resourceInputs["timeouts"] = state?.timeouts;
            resourceInputs["type"] = state?.type;
            resourceInputs["updated"] = state?.updated;
            resourceInputs["updates"] = state?.updates;
            resourceInputs["version"] = state?.version;
        }
        else {
            const args = argsOrState;
            if (args?.engineId === undefined && !opts.urn) {
                throw new Error("Missing required property 'engineId'");
            }
            if (args?.label === undefined && !opts.urn) {
                throw new Error("Missing required property 'label'");
            }
            if (args?.region === undefined && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["allowLists"] = args?.allowLists;
            resourceInputs["clusterSize"] = args?.clusterSize;
            resourceInputs["engineConfigBinlogRetentionPeriod"] = args?.engineConfigBinlogRetentionPeriod;
            resourceInputs["engineConfigMysqlConnectTimeout"] = args?.engineConfigMysqlConnectTimeout;
            resourceInputs["engineConfigMysqlDefaultTimeZone"] = args?.engineConfigMysqlDefaultTimeZone;
            resourceInputs["engineConfigMysqlGroupConcatMaxLen"] = args?.engineConfigMysqlGroupConcatMaxLen;
            resourceInputs["engineConfigMysqlInformationSchemaStatsExpiry"] = args?.engineConfigMysqlInformationSchemaStatsExpiry;
            resourceInputs["engineConfigMysqlInnodbChangeBufferMaxSize"] = args?.engineConfigMysqlInnodbChangeBufferMaxSize;
            resourceInputs["engineConfigMysqlInnodbFlushNeighbors"] = args?.engineConfigMysqlInnodbFlushNeighbors;
            resourceInputs["engineConfigMysqlInnodbFtMinTokenSize"] = args?.engineConfigMysqlInnodbFtMinTokenSize;
            resourceInputs["engineConfigMysqlInnodbFtServerStopwordTable"] = args?.engineConfigMysqlInnodbFtServerStopwordTable;
            resourceInputs["engineConfigMysqlInnodbLockWaitTimeout"] = args?.engineConfigMysqlInnodbLockWaitTimeout;
            resourceInputs["engineConfigMysqlInnodbLogBufferSize"] = args?.engineConfigMysqlInnodbLogBufferSize;
            resourceInputs["engineConfigMysqlInnodbOnlineAlterLogMaxSize"] = args?.engineConfigMysqlInnodbOnlineAlterLogMaxSize;
            resourceInputs["engineConfigMysqlInnodbReadIoThreads"] = args?.engineConfigMysqlInnodbReadIoThreads;
            resourceInputs["engineConfigMysqlInnodbRollbackOnTimeout"] = args?.engineConfigMysqlInnodbRollbackOnTimeout;
            resourceInputs["engineConfigMysqlInnodbThreadConcurrency"] = args?.engineConfigMysqlInnodbThreadConcurrency;
            resourceInputs["engineConfigMysqlInnodbWriteIoThreads"] = args?.engineConfigMysqlInnodbWriteIoThreads;
            resourceInputs["engineConfigMysqlInteractiveTimeout"] = args?.engineConfigMysqlInteractiveTimeout;
            resourceInputs["engineConfigMysqlInternalTmpMemStorageEngine"] = args?.engineConfigMysqlInternalTmpMemStorageEngine;
            resourceInputs["engineConfigMysqlMaxAllowedPacket"] = args?.engineConfigMysqlMaxAllowedPacket;
            resourceInputs["engineConfigMysqlMaxHeapTableSize"] = args?.engineConfigMysqlMaxHeapTableSize;
            resourceInputs["engineConfigMysqlNetBufferLength"] = args?.engineConfigMysqlNetBufferLength;
            resourceInputs["engineConfigMysqlNetReadTimeout"] = args?.engineConfigMysqlNetReadTimeout;
            resourceInputs["engineConfigMysqlNetWriteTimeout"] = args?.engineConfigMysqlNetWriteTimeout;
            resourceInputs["engineConfigMysqlSortBufferSize"] = args?.engineConfigMysqlSortBufferSize;
            resourceInputs["engineConfigMysqlSqlMode"] = args?.engineConfigMysqlSqlMode;
            resourceInputs["engineConfigMysqlSqlRequirePrimaryKey"] = args?.engineConfigMysqlSqlRequirePrimaryKey;
            resourceInputs["engineConfigMysqlTmpTableSize"] = args?.engineConfigMysqlTmpTableSize;
            resourceInputs["engineConfigMysqlWaitTimeout"] = args?.engineConfigMysqlWaitTimeout;
            resourceInputs["engineId"] = args?.engineId;
            resourceInputs["forkRestoreTime"] = args?.forkRestoreTime;
            resourceInputs["forkSource"] = args?.forkSource;
            resourceInputs["label"] = args?.label;
            resourceInputs["privateNetwork"] = args?.privateNetwork;
            resourceInputs["region"] = args?.region;
            resourceInputs["suspended"] = args?.suspended;
            resourceInputs["timeouts"] = args?.timeouts;
            resourceInputs["type"] = args?.type;
            resourceInputs["updates"] = args?.updates;
            resourceInputs["caCert"] = undefined /*out*/;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["encrypted"] = undefined /*out*/;
            resourceInputs["engine"] = undefined /*out*/;
            resourceInputs["hostPrimary"] = undefined /*out*/;
            resourceInputs["hostSecondary"] = undefined /*out*/;
            resourceInputs["members"] = undefined /*out*/;
            resourceInputs["oldestRestoreTime"] = undefined /*out*/;
            resourceInputs["pendingUpdates"] = undefined /*out*/;
            resourceInputs["platform"] = undefined /*out*/;
            resourceInputs["port"] = undefined /*out*/;
            resourceInputs["rootPassword"] = undefined /*out*/;
            resourceInputs["rootUsername"] = undefined /*out*/;
            resourceInputs["sslConnection"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updated"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["caCert", "rootPassword", "rootUsername"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(DatabaseMysqlV2.__pulumiType, name, resourceInputs, opts);
    }
}
exports.DatabaseMysqlV2 = DatabaseMysqlV2;
/** @internal */
DatabaseMysqlV2.__pulumiType = 'linode:index/databaseMysqlV2:DatabaseMysqlV2';
//# sourceMappingURL=databaseMysqlV2.js.map