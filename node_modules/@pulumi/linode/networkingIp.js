"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetworkingIp = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Manages allocation of reserved IPv4 address in a region and optionally assigning the reserved address to a Linode instance.
 *
 * For more information, see the corresponding [API documentation](https://techdocs.akamai.com/linode-api/reference/post-allocate-ip).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as linode from "@pulumi/linode";
 *
 * const testIp = new linode.NetworkingIp("test_ip", {
 *     type: "ipv4",
 *     linodeId: 12345,
 *     "public": true,
 * });
 * ```
 *
 * ## Import
 *
 * IP addresses can be imported using the IP address ID, e.g.
 *
 * ```sh
 * $ pulumi import linode:index/networkingIp:NetworkingIp example_ip 172.104.30.209
 * ```
 */
class NetworkingIp extends pulumi.CustomResource {
    /**
     * Get an existing NetworkingIp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new NetworkingIp(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of NetworkingIp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkingIp.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["address"] = state?.address;
            resourceInputs["gateway"] = state?.gateway;
            resourceInputs["linodeId"] = state?.linodeId;
            resourceInputs["prefix"] = state?.prefix;
            resourceInputs["public"] = state?.public;
            resourceInputs["rdns"] = state?.rdns;
            resourceInputs["region"] = state?.region;
            resourceInputs["reserved"] = state?.reserved;
            resourceInputs["subnetMask"] = state?.subnetMask;
            resourceInputs["type"] = state?.type;
            resourceInputs["vpcNat11"] = state?.vpcNat11;
        }
        else {
            const args = argsOrState;
            resourceInputs["linodeId"] = args?.linodeId;
            resourceInputs["public"] = args?.public;
            resourceInputs["region"] = args?.region;
            resourceInputs["reserved"] = args?.reserved;
            resourceInputs["type"] = args?.type;
            resourceInputs["address"] = undefined /*out*/;
            resourceInputs["gateway"] = undefined /*out*/;
            resourceInputs["prefix"] = undefined /*out*/;
            resourceInputs["rdns"] = undefined /*out*/;
            resourceInputs["subnetMask"] = undefined /*out*/;
            resourceInputs["vpcNat11"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkingIp.__pulumiType, name, resourceInputs, opts);
    }
}
exports.NetworkingIp = NetworkingIp;
/** @internal */
NetworkingIp.__pulumiType = 'linode:index/networkingIp:NetworkingIp';
//# sourceMappingURL=networkingIp.js.map