"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Vpc = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Manages a Linode VPC.
 * For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/post-vpc).
 *
 * Please refer to linode.VpcSubnet to manage the subnets under a Linode VPC.
 *
 * ## Example Usage
 *
 * Create a VPC:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as linode from "@pulumi/linode";
 *
 * const test = new linode.Vpc("test", {
 *     label: "test-vpc",
 *     region: "us-iad",
 *     description: "My first VPC.",
 * });
 * ```
 *
 * Create a VPC with a `/52` IPv6 range prefix:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as linode from "@pulumi/linode";
 *
 * // NOTE: IPv6 VPCs may not currently be available to all users.
 * const test = new linode.Vpc("test", {
 *     label: "test-vpc",
 *     region: "us-iad",
 *     ipv6s: [{
 *         range: "/52",
 *     }],
 * });
 * ```
 *
 * ## IPv6
 *
 * > **Limited Availability** IPv6 VPCs may not currently be available to all users.
 *
 * Configures a single IPv6 range under this VPC.
 *
 * * `range` - (Optional) An existing IPv6 prefix owned by the current account or a forward slash (/) followed by a valid prefix length. If unspecified, a range with the default prefix will be allocated for this VPC.
 *
 * * `allocationClass` - (Optional) Indicates the labeled IPv6 Inventory that the VPC Prefix should be allocated from.
 *
 * * `allocatedRange` - (Read-Only) The value of range computed by the API. This is necessary when needing to access the range for an implicit allocation.
 */
class Vpc extends pulumi.CustomResource {
    /**
     * Get an existing Vpc resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Vpc(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of Vpc.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Vpc.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["created"] = state?.created;
            resourceInputs["description"] = state?.description;
            resourceInputs["ipv6s"] = state?.ipv6s;
            resourceInputs["label"] = state?.label;
            resourceInputs["region"] = state?.region;
            resourceInputs["updated"] = state?.updated;
        }
        else {
            const args = argsOrState;
            if (args?.label === undefined && !opts.urn) {
                throw new Error("Missing required property 'label'");
            }
            if (args?.region === undefined && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["ipv6s"] = args?.ipv6s;
            resourceInputs["label"] = args?.label;
            resourceInputs["region"] = args?.region;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["updated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Vpc.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Vpc = Vpc;
/** @internal */
Vpc.__pulumiType = 'linode:index/vpc:Vpc';
//# sourceMappingURL=vpc.js.map