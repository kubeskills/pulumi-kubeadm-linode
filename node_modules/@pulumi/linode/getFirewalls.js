"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFirewallsOutput = exports.getFirewalls = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Provides information about Linode Cloud Firewalls that match a set of filters.
 * For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-firewalls).
 *
 * ## Example Usage
 *
 * Get information about all Linode Cloud Firewalls with a certain label and visibility:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as linode from "@pulumi/linode";
 *
 * const specific = linode.getFirewalls({
 *     filters: [
 *         {
 *             name: "label",
 *             values: ["my-firewalls"],
 *         },
 *         {
 *             name: "tags",
 *             values: ["my-tag"],
 *         },
 *     ],
 * });
 * export const firewallId = specific.then(specific => specific.firewalls?.[0]?.id);
 * ```
 *
 * Get information about all Linode images associated with the current token:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as linode from "@pulumi/linode";
 *
 * const all = linode.getFirewalls({});
 * export const firewallIds = all.then(all => all.firewalls.map(__item => __item.id));
 * ```
 *
 * ## Firewall Rule
 *
 * * `label` - The label of this rule for display purposes only.
 *
 * * `action` - Controls whether traffic is accepted or dropped by this rule (ACCEPT, DROP).
 *
 * * `protocol` - The network protocol this rule controls. (TCP, UDP, ICMP)
 *
 * * `ports` - A string representation of ports and/or port ranges (i.e. "443" or "80-90, 91").
 *
 * * `ipv4` - A list of IPv4 addresses or networks in IP/mask format.
 *
 * * `ipv6` - A list of IPv6 addresses or networks in IP/mask format.
 *
 * ## Firewall Device
 *
 * * `id` - The unique ID of this Firewall Device assignment.
 *
 * * `entityId` - The ID of the underlying entity this device references.
 *
 * * `type` - The type of the assigned entity.
 *
 * * `label` - The label of the assigned entity.
 *
 * * `url` - The URL of the assigned entity.
 *
 * ## Filterable Fields
 *
 * * `id`
 *
 * * `label`
 *
 * * `status`
 *
 * * `tags`
 */
function getFirewalls(args, opts) {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("linode:index/getFirewalls:getFirewalls", {
        "filters": args.filters,
        "firewalls": args.firewalls,
        "order": args.order,
        "orderBy": args.orderBy,
    }, opts);
}
exports.getFirewalls = getFirewalls;
/**
 * Provides information about Linode Cloud Firewalls that match a set of filters.
 * For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-firewalls).
 *
 * ## Example Usage
 *
 * Get information about all Linode Cloud Firewalls with a certain label and visibility:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as linode from "@pulumi/linode";
 *
 * const specific = linode.getFirewalls({
 *     filters: [
 *         {
 *             name: "label",
 *             values: ["my-firewalls"],
 *         },
 *         {
 *             name: "tags",
 *             values: ["my-tag"],
 *         },
 *     ],
 * });
 * export const firewallId = specific.then(specific => specific.firewalls?.[0]?.id);
 * ```
 *
 * Get information about all Linode images associated with the current token:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as linode from "@pulumi/linode";
 *
 * const all = linode.getFirewalls({});
 * export const firewallIds = all.then(all => all.firewalls.map(__item => __item.id));
 * ```
 *
 * ## Firewall Rule
 *
 * * `label` - The label of this rule for display purposes only.
 *
 * * `action` - Controls whether traffic is accepted or dropped by this rule (ACCEPT, DROP).
 *
 * * `protocol` - The network protocol this rule controls. (TCP, UDP, ICMP)
 *
 * * `ports` - A string representation of ports and/or port ranges (i.e. "443" or "80-90, 91").
 *
 * * `ipv4` - A list of IPv4 addresses or networks in IP/mask format.
 *
 * * `ipv6` - A list of IPv6 addresses or networks in IP/mask format.
 *
 * ## Firewall Device
 *
 * * `id` - The unique ID of this Firewall Device assignment.
 *
 * * `entityId` - The ID of the underlying entity this device references.
 *
 * * `type` - The type of the assigned entity.
 *
 * * `label` - The label of the assigned entity.
 *
 * * `url` - The URL of the assigned entity.
 *
 * ## Filterable Fields
 *
 * * `id`
 *
 * * `label`
 *
 * * `status`
 *
 * * `tags`
 */
function getFirewallsOutput(args, opts) {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("linode:index/getFirewalls:getFirewalls", {
        "filters": args.filters,
        "firewalls": args.firewalls,
        "order": args.order,
        "orderBy": args.orderBy,
    }, opts);
}
exports.getFirewallsOutput = getFirewallsOutput;
//# sourceMappingURL=getFirewalls.js.map