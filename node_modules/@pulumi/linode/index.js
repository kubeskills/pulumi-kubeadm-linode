"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDomainRecordOutput = exports.getDomainRecord = exports.getDomainOutput = exports.getDomain = exports.getDatabasesOutput = exports.getDatabases = exports.getDatabasePostgresqlV2Output = exports.getDatabasePostgresqlV2 = exports.getDatabasePostgresqlConfigOutput = exports.getDatabasePostgresqlConfig = exports.getDatabasePostgresqlOutput = exports.getDatabasePostgresql = exports.getDatabaseMysqlV2Output = exports.getDatabaseMysqlV2 = exports.getDatabaseMysqlConfigOutput = exports.getDatabaseMysqlConfig = exports.getDatabaseMysqlBackupsOutput = exports.getDatabaseMysqlBackups = exports.getDatabaseMysqlOutput = exports.getDatabaseMysql = exports.getDatabaseEnginesOutput = exports.getDatabaseEngines = exports.getDatabaseBackupsOutput = exports.getDatabaseBackups = exports.getChildAccountsOutput = exports.getChildAccounts = exports.getChildAccountOutput = exports.getChildAccount = exports.getAccountSettingsOutput = exports.getAccountSettings = exports.getAccountLoginsOutput = exports.getAccountLogins = exports.getAccountLoginOutput = exports.getAccountLogin = exports.getAccountAvailabilityOutput = exports.getAccountAvailability = exports.getAccountAvailabilitiesOutput = exports.getAccountAvailabilities = exports.getAccountOutput = exports.getAccount = exports.FirewallDevice = exports.Firewall = exports.DomainRecord = exports.Domain = exports.DatabasePostgresqlV2 = exports.DatabasePostgresql = exports.DatabaseMysqlV2 = exports.DatabaseMysql = exports.DatabaseAccessControls = exports.AccountSettings = void 0;
exports.getNetworkingIpOutput = exports.getNetworkingIp = exports.getNetworkTransferPricesOutput = exports.getNetworkTransferPrices = exports.getNbTypesOutput = exports.getNbTypes = exports.getMaintenancePoliciesOutput = exports.getMaintenancePolicies = exports.getLkeVersionsOutput = exports.getLkeVersions = exports.getLkeVersionOutput = exports.getLkeVersion = exports.getLkeTypesOutput = exports.getLkeTypes = exports.getLkeClustersOutput = exports.getLkeClusters = exports.getLkeClusterOutput = exports.getLkeCluster = exports.getLinodeObjectStorageBucketOutput = exports.getLinodeObjectStorageBucket = exports.getKernelsOutput = exports.getKernels = exports.getKernelOutput = exports.getKernel = exports.getIpv6RangesOutput = exports.getIpv6Ranges = exports.getIpv6RangeOutput = exports.getIpv6Range = exports.getInstancesOutput = exports.getInstances = exports.getInstanceTypesOutput = exports.getInstanceTypes = exports.getInstanceTypeOutput = exports.getInstanceType = exports.getInstanceNetworkingOutput = exports.getInstanceNetworking = exports.getInstanceBackupsOutput = exports.getInstanceBackups = exports.getImagesOutput = exports.getImages = exports.getImageOutput = exports.getImage = exports.getFirewallsOutput = exports.getFirewalls = exports.getFirewallOutput = exports.getFirewall = exports.getDomainsOutput = exports.getDomains = exports.getDomainZonefileOutput = exports.getDomainZonefile = void 0;
exports.getVolumeOutput = exports.getVolume = exports.getVlansOutput = exports.getVlans = exports.getUsersOutput = exports.getUsers = exports.getUserOutput = exports.getUser = exports.getStackScriptsOutput = exports.getStackScripts = exports.getStackScriptOutput = exports.getStackScript = exports.getSshkeysOutput = exports.getSshkeys = exports.getSshKeyOutput = exports.getSshKey = exports.getRegionsOutput = exports.getRegions = exports.getRegionOutput = exports.getRegion = exports.getProfileOutput = exports.getProfile = exports.getPlacementGroupsOutput = exports.getPlacementGroups = exports.getPlacementGroupOutput = exports.getPlacementGroup = exports.getObjectStorageQuotasOutput = exports.getObjectStorageQuotas = exports.getObjectStorageQuotaOutput = exports.getObjectStorageQuota = exports.getObjectStorageEndpointsOutput = exports.getObjectStorageEndpoints = exports.getObjectStorageClusterOutput = exports.getObjectStorageCluster = exports.getNodebalancersOutput = exports.getNodebalancers = exports.getNodebalancerVpcsOutput = exports.getNodebalancerVpcs = exports.getNodebalancerVpcOutput = exports.getNodebalancerVpc = exports.getNodebalancerConfigsOutput = exports.getNodebalancerConfigs = exports.getNodeBalancerNodeOutput = exports.getNodeBalancerNode = exports.getNodeBalancerConfigOutput = exports.getNodeBalancerConfig = exports.getNodeBalancerOutput = exports.getNodeBalancer = exports.getNetworkingIpsOutput = exports.getNetworkingIps = void 0;
exports.types = exports.config = exports.VpcSubnet = exports.Vpc = exports.Volume = exports.User = exports.Token = exports.StackScript = exports.SshKey = exports.ReservedIpAssignment = exports.Rdns = exports.PlacementGroupAssignment = exports.PlacementGroup = exports.ObjectStorageObject = exports.ObjectStorageKey = exports.ObjectStorageBucket = exports.NodeBalancerNode = exports.NodeBalancerConfig = exports.NodeBalancer = exports.NetworkingIpAssignment = exports.NetworkingIp = exports.LkeNodePool = exports.LkeCluster = exports.Ipv6Range = exports.InstanceSharedIps = exports.InstanceIp = exports.InstanceDisk = exports.InstanceConfig = exports.Instance = exports.Image = exports.getVpcsOutput = exports.getVpcs = exports.getVpcSubnetsOutput = exports.getVpcSubnets = exports.getVpcSubnetOutput = exports.getVpcSubnet = exports.getVpcIpsOutput = exports.getVpcIps = exports.getVpcOutput = exports.getVpc = exports.getVolumesOutput = exports.getVolumes = exports.getVolumeTypesOutput = exports.getVolumeTypes = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
exports.AccountSettings = null;
utilities.lazyLoad(exports, ["AccountSettings"], () => require("./accountSettings"));
exports.DatabaseAccessControls = null;
utilities.lazyLoad(exports, ["DatabaseAccessControls"], () => require("./databaseAccessControls"));
exports.DatabaseMysql = null;
utilities.lazyLoad(exports, ["DatabaseMysql"], () => require("./databaseMysql"));
exports.DatabaseMysqlV2 = null;
utilities.lazyLoad(exports, ["DatabaseMysqlV2"], () => require("./databaseMysqlV2"));
exports.DatabasePostgresql = null;
utilities.lazyLoad(exports, ["DatabasePostgresql"], () => require("./databasePostgresql"));
exports.DatabasePostgresqlV2 = null;
utilities.lazyLoad(exports, ["DatabasePostgresqlV2"], () => require("./databasePostgresqlV2"));
exports.Domain = null;
utilities.lazyLoad(exports, ["Domain"], () => require("./domain"));
exports.DomainRecord = null;
utilities.lazyLoad(exports, ["DomainRecord"], () => require("./domainRecord"));
exports.Firewall = null;
utilities.lazyLoad(exports, ["Firewall"], () => require("./firewall"));
exports.FirewallDevice = null;
utilities.lazyLoad(exports, ["FirewallDevice"], () => require("./firewallDevice"));
exports.getAccount = null;
exports.getAccountOutput = null;
utilities.lazyLoad(exports, ["getAccount", "getAccountOutput"], () => require("./getAccount"));
exports.getAccountAvailabilities = null;
exports.getAccountAvailabilitiesOutput = null;
utilities.lazyLoad(exports, ["getAccountAvailabilities", "getAccountAvailabilitiesOutput"], () => require("./getAccountAvailabilities"));
exports.getAccountAvailability = null;
exports.getAccountAvailabilityOutput = null;
utilities.lazyLoad(exports, ["getAccountAvailability", "getAccountAvailabilityOutput"], () => require("./getAccountAvailability"));
exports.getAccountLogin = null;
exports.getAccountLoginOutput = null;
utilities.lazyLoad(exports, ["getAccountLogin", "getAccountLoginOutput"], () => require("./getAccountLogin"));
exports.getAccountLogins = null;
exports.getAccountLoginsOutput = null;
utilities.lazyLoad(exports, ["getAccountLogins", "getAccountLoginsOutput"], () => require("./getAccountLogins"));
exports.getAccountSettings = null;
exports.getAccountSettingsOutput = null;
utilities.lazyLoad(exports, ["getAccountSettings", "getAccountSettingsOutput"], () => require("./getAccountSettings"));
exports.getChildAccount = null;
exports.getChildAccountOutput = null;
utilities.lazyLoad(exports, ["getChildAccount", "getChildAccountOutput"], () => require("./getChildAccount"));
exports.getChildAccounts = null;
exports.getChildAccountsOutput = null;
utilities.lazyLoad(exports, ["getChildAccounts", "getChildAccountsOutput"], () => require("./getChildAccounts"));
exports.getDatabaseBackups = null;
exports.getDatabaseBackupsOutput = null;
utilities.lazyLoad(exports, ["getDatabaseBackups", "getDatabaseBackupsOutput"], () => require("./getDatabaseBackups"));
exports.getDatabaseEngines = null;
exports.getDatabaseEnginesOutput = null;
utilities.lazyLoad(exports, ["getDatabaseEngines", "getDatabaseEnginesOutput"], () => require("./getDatabaseEngines"));
exports.getDatabaseMysql = null;
exports.getDatabaseMysqlOutput = null;
utilities.lazyLoad(exports, ["getDatabaseMysql", "getDatabaseMysqlOutput"], () => require("./getDatabaseMysql"));
exports.getDatabaseMysqlBackups = null;
exports.getDatabaseMysqlBackupsOutput = null;
utilities.lazyLoad(exports, ["getDatabaseMysqlBackups", "getDatabaseMysqlBackupsOutput"], () => require("./getDatabaseMysqlBackups"));
exports.getDatabaseMysqlConfig = null;
exports.getDatabaseMysqlConfigOutput = null;
utilities.lazyLoad(exports, ["getDatabaseMysqlConfig", "getDatabaseMysqlConfigOutput"], () => require("./getDatabaseMysqlConfig"));
exports.getDatabaseMysqlV2 = null;
exports.getDatabaseMysqlV2Output = null;
utilities.lazyLoad(exports, ["getDatabaseMysqlV2", "getDatabaseMysqlV2Output"], () => require("./getDatabaseMysqlV2"));
exports.getDatabasePostgresql = null;
exports.getDatabasePostgresqlOutput = null;
utilities.lazyLoad(exports, ["getDatabasePostgresql", "getDatabasePostgresqlOutput"], () => require("./getDatabasePostgresql"));
exports.getDatabasePostgresqlConfig = null;
exports.getDatabasePostgresqlConfigOutput = null;
utilities.lazyLoad(exports, ["getDatabasePostgresqlConfig", "getDatabasePostgresqlConfigOutput"], () => require("./getDatabasePostgresqlConfig"));
exports.getDatabasePostgresqlV2 = null;
exports.getDatabasePostgresqlV2Output = null;
utilities.lazyLoad(exports, ["getDatabasePostgresqlV2", "getDatabasePostgresqlV2Output"], () => require("./getDatabasePostgresqlV2"));
exports.getDatabases = null;
exports.getDatabasesOutput = null;
utilities.lazyLoad(exports, ["getDatabases", "getDatabasesOutput"], () => require("./getDatabases"));
exports.getDomain = null;
exports.getDomainOutput = null;
utilities.lazyLoad(exports, ["getDomain", "getDomainOutput"], () => require("./getDomain"));
exports.getDomainRecord = null;
exports.getDomainRecordOutput = null;
utilities.lazyLoad(exports, ["getDomainRecord", "getDomainRecordOutput"], () => require("./getDomainRecord"));
exports.getDomainZonefile = null;
exports.getDomainZonefileOutput = null;
utilities.lazyLoad(exports, ["getDomainZonefile", "getDomainZonefileOutput"], () => require("./getDomainZonefile"));
exports.getDomains = null;
exports.getDomainsOutput = null;
utilities.lazyLoad(exports, ["getDomains", "getDomainsOutput"], () => require("./getDomains"));
exports.getFirewall = null;
exports.getFirewallOutput = null;
utilities.lazyLoad(exports, ["getFirewall", "getFirewallOutput"], () => require("./getFirewall"));
exports.getFirewalls = null;
exports.getFirewallsOutput = null;
utilities.lazyLoad(exports, ["getFirewalls", "getFirewallsOutput"], () => require("./getFirewalls"));
exports.getImage = null;
exports.getImageOutput = null;
utilities.lazyLoad(exports, ["getImage", "getImageOutput"], () => require("./getImage"));
exports.getImages = null;
exports.getImagesOutput = null;
utilities.lazyLoad(exports, ["getImages", "getImagesOutput"], () => require("./getImages"));
exports.getInstanceBackups = null;
exports.getInstanceBackupsOutput = null;
utilities.lazyLoad(exports, ["getInstanceBackups", "getInstanceBackupsOutput"], () => require("./getInstanceBackups"));
exports.getInstanceNetworking = null;
exports.getInstanceNetworkingOutput = null;
utilities.lazyLoad(exports, ["getInstanceNetworking", "getInstanceNetworkingOutput"], () => require("./getInstanceNetworking"));
exports.getInstanceType = null;
exports.getInstanceTypeOutput = null;
utilities.lazyLoad(exports, ["getInstanceType", "getInstanceTypeOutput"], () => require("./getInstanceType"));
exports.getInstanceTypes = null;
exports.getInstanceTypesOutput = null;
utilities.lazyLoad(exports, ["getInstanceTypes", "getInstanceTypesOutput"], () => require("./getInstanceTypes"));
exports.getInstances = null;
exports.getInstancesOutput = null;
utilities.lazyLoad(exports, ["getInstances", "getInstancesOutput"], () => require("./getInstances"));
exports.getIpv6Range = null;
exports.getIpv6RangeOutput = null;
utilities.lazyLoad(exports, ["getIpv6Range", "getIpv6RangeOutput"], () => require("./getIpv6Range"));
exports.getIpv6Ranges = null;
exports.getIpv6RangesOutput = null;
utilities.lazyLoad(exports, ["getIpv6Ranges", "getIpv6RangesOutput"], () => require("./getIpv6Ranges"));
exports.getKernel = null;
exports.getKernelOutput = null;
utilities.lazyLoad(exports, ["getKernel", "getKernelOutput"], () => require("./getKernel"));
exports.getKernels = null;
exports.getKernelsOutput = null;
utilities.lazyLoad(exports, ["getKernels", "getKernelsOutput"], () => require("./getKernels"));
exports.getLinodeObjectStorageBucket = null;
exports.getLinodeObjectStorageBucketOutput = null;
utilities.lazyLoad(exports, ["getLinodeObjectStorageBucket", "getLinodeObjectStorageBucketOutput"], () => require("./getLinodeObjectStorageBucket"));
exports.getLkeCluster = null;
exports.getLkeClusterOutput = null;
utilities.lazyLoad(exports, ["getLkeCluster", "getLkeClusterOutput"], () => require("./getLkeCluster"));
exports.getLkeClusters = null;
exports.getLkeClustersOutput = null;
utilities.lazyLoad(exports, ["getLkeClusters", "getLkeClustersOutput"], () => require("./getLkeClusters"));
exports.getLkeTypes = null;
exports.getLkeTypesOutput = null;
utilities.lazyLoad(exports, ["getLkeTypes", "getLkeTypesOutput"], () => require("./getLkeTypes"));
exports.getLkeVersion = null;
exports.getLkeVersionOutput = null;
utilities.lazyLoad(exports, ["getLkeVersion", "getLkeVersionOutput"], () => require("./getLkeVersion"));
exports.getLkeVersions = null;
exports.getLkeVersionsOutput = null;
utilities.lazyLoad(exports, ["getLkeVersions", "getLkeVersionsOutput"], () => require("./getLkeVersions"));
exports.getMaintenancePolicies = null;
exports.getMaintenancePoliciesOutput = null;
utilities.lazyLoad(exports, ["getMaintenancePolicies", "getMaintenancePoliciesOutput"], () => require("./getMaintenancePolicies"));
exports.getNbTypes = null;
exports.getNbTypesOutput = null;
utilities.lazyLoad(exports, ["getNbTypes", "getNbTypesOutput"], () => require("./getNbTypes"));
exports.getNetworkTransferPrices = null;
exports.getNetworkTransferPricesOutput = null;
utilities.lazyLoad(exports, ["getNetworkTransferPrices", "getNetworkTransferPricesOutput"], () => require("./getNetworkTransferPrices"));
exports.getNetworkingIp = null;
exports.getNetworkingIpOutput = null;
utilities.lazyLoad(exports, ["getNetworkingIp", "getNetworkingIpOutput"], () => require("./getNetworkingIp"));
exports.getNetworkingIps = null;
exports.getNetworkingIpsOutput = null;
utilities.lazyLoad(exports, ["getNetworkingIps", "getNetworkingIpsOutput"], () => require("./getNetworkingIps"));
exports.getNodeBalancer = null;
exports.getNodeBalancerOutput = null;
utilities.lazyLoad(exports, ["getNodeBalancer", "getNodeBalancerOutput"], () => require("./getNodeBalancer"));
exports.getNodeBalancerConfig = null;
exports.getNodeBalancerConfigOutput = null;
utilities.lazyLoad(exports, ["getNodeBalancerConfig", "getNodeBalancerConfigOutput"], () => require("./getNodeBalancerConfig"));
exports.getNodeBalancerNode = null;
exports.getNodeBalancerNodeOutput = null;
utilities.lazyLoad(exports, ["getNodeBalancerNode", "getNodeBalancerNodeOutput"], () => require("./getNodeBalancerNode"));
exports.getNodebalancerConfigs = null;
exports.getNodebalancerConfigsOutput = null;
utilities.lazyLoad(exports, ["getNodebalancerConfigs", "getNodebalancerConfigsOutput"], () => require("./getNodebalancerConfigs"));
exports.getNodebalancerVpc = null;
exports.getNodebalancerVpcOutput = null;
utilities.lazyLoad(exports, ["getNodebalancerVpc", "getNodebalancerVpcOutput"], () => require("./getNodebalancerVpc"));
exports.getNodebalancerVpcs = null;
exports.getNodebalancerVpcsOutput = null;
utilities.lazyLoad(exports, ["getNodebalancerVpcs", "getNodebalancerVpcsOutput"], () => require("./getNodebalancerVpcs"));
exports.getNodebalancers = null;
exports.getNodebalancersOutput = null;
utilities.lazyLoad(exports, ["getNodebalancers", "getNodebalancersOutput"], () => require("./getNodebalancers"));
exports.getObjectStorageCluster = null;
exports.getObjectStorageClusterOutput = null;
utilities.lazyLoad(exports, ["getObjectStorageCluster", "getObjectStorageClusterOutput"], () => require("./getObjectStorageCluster"));
exports.getObjectStorageEndpoints = null;
exports.getObjectStorageEndpointsOutput = null;
utilities.lazyLoad(exports, ["getObjectStorageEndpoints", "getObjectStorageEndpointsOutput"], () => require("./getObjectStorageEndpoints"));
exports.getObjectStorageQuota = null;
exports.getObjectStorageQuotaOutput = null;
utilities.lazyLoad(exports, ["getObjectStorageQuota", "getObjectStorageQuotaOutput"], () => require("./getObjectStorageQuota"));
exports.getObjectStorageQuotas = null;
exports.getObjectStorageQuotasOutput = null;
utilities.lazyLoad(exports, ["getObjectStorageQuotas", "getObjectStorageQuotasOutput"], () => require("./getObjectStorageQuotas"));
exports.getPlacementGroup = null;
exports.getPlacementGroupOutput = null;
utilities.lazyLoad(exports, ["getPlacementGroup", "getPlacementGroupOutput"], () => require("./getPlacementGroup"));
exports.getPlacementGroups = null;
exports.getPlacementGroupsOutput = null;
utilities.lazyLoad(exports, ["getPlacementGroups", "getPlacementGroupsOutput"], () => require("./getPlacementGroups"));
exports.getProfile = null;
exports.getProfileOutput = null;
utilities.lazyLoad(exports, ["getProfile", "getProfileOutput"], () => require("./getProfile"));
exports.getRegion = null;
exports.getRegionOutput = null;
utilities.lazyLoad(exports, ["getRegion", "getRegionOutput"], () => require("./getRegion"));
exports.getRegions = null;
exports.getRegionsOutput = null;
utilities.lazyLoad(exports, ["getRegions", "getRegionsOutput"], () => require("./getRegions"));
exports.getSshKey = null;
exports.getSshKeyOutput = null;
utilities.lazyLoad(exports, ["getSshKey", "getSshKeyOutput"], () => require("./getSshKey"));
exports.getSshkeys = null;
exports.getSshkeysOutput = null;
utilities.lazyLoad(exports, ["getSshkeys", "getSshkeysOutput"], () => require("./getSshkeys"));
exports.getStackScript = null;
exports.getStackScriptOutput = null;
utilities.lazyLoad(exports, ["getStackScript", "getStackScriptOutput"], () => require("./getStackScript"));
exports.getStackScripts = null;
exports.getStackScriptsOutput = null;
utilities.lazyLoad(exports, ["getStackScripts", "getStackScriptsOutput"], () => require("./getStackScripts"));
exports.getUser = null;
exports.getUserOutput = null;
utilities.lazyLoad(exports, ["getUser", "getUserOutput"], () => require("./getUser"));
exports.getUsers = null;
exports.getUsersOutput = null;
utilities.lazyLoad(exports, ["getUsers", "getUsersOutput"], () => require("./getUsers"));
exports.getVlans = null;
exports.getVlansOutput = null;
utilities.lazyLoad(exports, ["getVlans", "getVlansOutput"], () => require("./getVlans"));
exports.getVolume = null;
exports.getVolumeOutput = null;
utilities.lazyLoad(exports, ["getVolume", "getVolumeOutput"], () => require("./getVolume"));
exports.getVolumeTypes = null;
exports.getVolumeTypesOutput = null;
utilities.lazyLoad(exports, ["getVolumeTypes", "getVolumeTypesOutput"], () => require("./getVolumeTypes"));
exports.getVolumes = null;
exports.getVolumesOutput = null;
utilities.lazyLoad(exports, ["getVolumes", "getVolumesOutput"], () => require("./getVolumes"));
exports.getVpc = null;
exports.getVpcOutput = null;
utilities.lazyLoad(exports, ["getVpc", "getVpcOutput"], () => require("./getVpc"));
exports.getVpcIps = null;
exports.getVpcIpsOutput = null;
utilities.lazyLoad(exports, ["getVpcIps", "getVpcIpsOutput"], () => require("./getVpcIps"));
exports.getVpcSubnet = null;
exports.getVpcSubnetOutput = null;
utilities.lazyLoad(exports, ["getVpcSubnet", "getVpcSubnetOutput"], () => require("./getVpcSubnet"));
exports.getVpcSubnets = null;
exports.getVpcSubnetsOutput = null;
utilities.lazyLoad(exports, ["getVpcSubnets", "getVpcSubnetsOutput"], () => require("./getVpcSubnets"));
exports.getVpcs = null;
exports.getVpcsOutput = null;
utilities.lazyLoad(exports, ["getVpcs", "getVpcsOutput"], () => require("./getVpcs"));
exports.Image = null;
utilities.lazyLoad(exports, ["Image"], () => require("./image"));
exports.Instance = null;
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));
exports.InstanceConfig = null;
utilities.lazyLoad(exports, ["InstanceConfig"], () => require("./instanceConfig"));
exports.InstanceDisk = null;
utilities.lazyLoad(exports, ["InstanceDisk"], () => require("./instanceDisk"));
exports.InstanceIp = null;
utilities.lazyLoad(exports, ["InstanceIp"], () => require("./instanceIp"));
exports.InstanceSharedIps = null;
utilities.lazyLoad(exports, ["InstanceSharedIps"], () => require("./instanceSharedIps"));
exports.Ipv6Range = null;
utilities.lazyLoad(exports, ["Ipv6Range"], () => require("./ipv6Range"));
exports.LkeCluster = null;
utilities.lazyLoad(exports, ["LkeCluster"], () => require("./lkeCluster"));
exports.LkeNodePool = null;
utilities.lazyLoad(exports, ["LkeNodePool"], () => require("./lkeNodePool"));
exports.NetworkingIp = null;
utilities.lazyLoad(exports, ["NetworkingIp"], () => require("./networkingIp"));
exports.NetworkingIpAssignment = null;
utilities.lazyLoad(exports, ["NetworkingIpAssignment"], () => require("./networkingIpAssignment"));
exports.NodeBalancer = null;
utilities.lazyLoad(exports, ["NodeBalancer"], () => require("./nodeBalancer"));
exports.NodeBalancerConfig = null;
utilities.lazyLoad(exports, ["NodeBalancerConfig"], () => require("./nodeBalancerConfig"));
exports.NodeBalancerNode = null;
utilities.lazyLoad(exports, ["NodeBalancerNode"], () => require("./nodeBalancerNode"));
exports.ObjectStorageBucket = null;
utilities.lazyLoad(exports, ["ObjectStorageBucket"], () => require("./objectStorageBucket"));
exports.ObjectStorageKey = null;
utilities.lazyLoad(exports, ["ObjectStorageKey"], () => require("./objectStorageKey"));
exports.ObjectStorageObject = null;
utilities.lazyLoad(exports, ["ObjectStorageObject"], () => require("./objectStorageObject"));
exports.PlacementGroup = null;
utilities.lazyLoad(exports, ["PlacementGroup"], () => require("./placementGroup"));
exports.PlacementGroupAssignment = null;
utilities.lazyLoad(exports, ["PlacementGroupAssignment"], () => require("./placementGroupAssignment"));
__exportStar(require("./provider"), exports);
const provider_1 = require("./provider");
exports.Rdns = null;
utilities.lazyLoad(exports, ["Rdns"], () => require("./rdns"));
exports.ReservedIpAssignment = null;
utilities.lazyLoad(exports, ["ReservedIpAssignment"], () => require("./reservedIpAssignment"));
exports.SshKey = null;
utilities.lazyLoad(exports, ["SshKey"], () => require("./sshKey"));
exports.StackScript = null;
utilities.lazyLoad(exports, ["StackScript"], () => require("./stackScript"));
exports.Token = null;
utilities.lazyLoad(exports, ["Token"], () => require("./token"));
exports.User = null;
utilities.lazyLoad(exports, ["User"], () => require("./user"));
exports.Volume = null;
utilities.lazyLoad(exports, ["Volume"], () => require("./volume"));
exports.Vpc = null;
utilities.lazyLoad(exports, ["Vpc"], () => require("./vpc"));
exports.VpcSubnet = null;
utilities.lazyLoad(exports, ["VpcSubnet"], () => require("./vpcSubnet"));
// Export sub-modules:
const config = require("./config");
exports.config = config;
const types = require("./types");
exports.types = types;
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "linode:index/accountSettings:AccountSettings":
                return new exports.AccountSettings(name, undefined, { urn });
            case "linode:index/databaseAccessControls:DatabaseAccessControls":
                return new exports.DatabaseAccessControls(name, undefined, { urn });
            case "linode:index/databaseMysql:DatabaseMysql":
                return new exports.DatabaseMysql(name, undefined, { urn });
            case "linode:index/databaseMysqlV2:DatabaseMysqlV2":
                return new exports.DatabaseMysqlV2(name, undefined, { urn });
            case "linode:index/databasePostgresql:DatabasePostgresql":
                return new exports.DatabasePostgresql(name, undefined, { urn });
            case "linode:index/databasePostgresqlV2:DatabasePostgresqlV2":
                return new exports.DatabasePostgresqlV2(name, undefined, { urn });
            case "linode:index/domain:Domain":
                return new exports.Domain(name, undefined, { urn });
            case "linode:index/domainRecord:DomainRecord":
                return new exports.DomainRecord(name, undefined, { urn });
            case "linode:index/firewall:Firewall":
                return new exports.Firewall(name, undefined, { urn });
            case "linode:index/firewallDevice:FirewallDevice":
                return new exports.FirewallDevice(name, undefined, { urn });
            case "linode:index/image:Image":
                return new exports.Image(name, undefined, { urn });
            case "linode:index/instance:Instance":
                return new exports.Instance(name, undefined, { urn });
            case "linode:index/instanceConfig:InstanceConfig":
                return new exports.InstanceConfig(name, undefined, { urn });
            case "linode:index/instanceDisk:InstanceDisk":
                return new exports.InstanceDisk(name, undefined, { urn });
            case "linode:index/instanceIp:InstanceIp":
                return new exports.InstanceIp(name, undefined, { urn });
            case "linode:index/instanceSharedIps:InstanceSharedIps":
                return new exports.InstanceSharedIps(name, undefined, { urn });
            case "linode:index/ipv6Range:Ipv6Range":
                return new exports.Ipv6Range(name, undefined, { urn });
            case "linode:index/lkeCluster:LkeCluster":
                return new exports.LkeCluster(name, undefined, { urn });
            case "linode:index/lkeNodePool:LkeNodePool":
                return new exports.LkeNodePool(name, undefined, { urn });
            case "linode:index/networkingIp:NetworkingIp":
                return new exports.NetworkingIp(name, undefined, { urn });
            case "linode:index/networkingIpAssignment:NetworkingIpAssignment":
                return new exports.NetworkingIpAssignment(name, undefined, { urn });
            case "linode:index/nodeBalancer:NodeBalancer":
                return new exports.NodeBalancer(name, undefined, { urn });
            case "linode:index/nodeBalancerConfig:NodeBalancerConfig":
                return new exports.NodeBalancerConfig(name, undefined, { urn });
            case "linode:index/nodeBalancerNode:NodeBalancerNode":
                return new exports.NodeBalancerNode(name, undefined, { urn });
            case "linode:index/objectStorageBucket:ObjectStorageBucket":
                return new exports.ObjectStorageBucket(name, undefined, { urn });
            case "linode:index/objectStorageKey:ObjectStorageKey":
                return new exports.ObjectStorageKey(name, undefined, { urn });
            case "linode:index/objectStorageObject:ObjectStorageObject":
                return new exports.ObjectStorageObject(name, undefined, { urn });
            case "linode:index/placementGroup:PlacementGroup":
                return new exports.PlacementGroup(name, undefined, { urn });
            case "linode:index/placementGroupAssignment:PlacementGroupAssignment":
                return new exports.PlacementGroupAssignment(name, undefined, { urn });
            case "linode:index/rdns:Rdns":
                return new exports.Rdns(name, undefined, { urn });
            case "linode:index/reservedIpAssignment:ReservedIpAssignment":
                return new exports.ReservedIpAssignment(name, undefined, { urn });
            case "linode:index/sshKey:SshKey":
                return new exports.SshKey(name, undefined, { urn });
            case "linode:index/stackScript:StackScript":
                return new exports.StackScript(name, undefined, { urn });
            case "linode:index/token:Token":
                return new exports.Token(name, undefined, { urn });
            case "linode:index/user:User":
                return new exports.User(name, undefined, { urn });
            case "linode:index/volume:Volume":
                return new exports.Volume(name, undefined, { urn });
            case "linode:index/vpc:Vpc":
                return new exports.Vpc(name, undefined, { urn });
            case "linode:index/vpcSubnet:VpcSubnet":
                return new exports.VpcSubnet(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("linode", "index/accountSettings", _module);
pulumi.runtime.registerResourceModule("linode", "index/databaseAccessControls", _module);
pulumi.runtime.registerResourceModule("linode", "index/databaseMysql", _module);
pulumi.runtime.registerResourceModule("linode", "index/databaseMysqlV2", _module);
pulumi.runtime.registerResourceModule("linode", "index/databasePostgresql", _module);
pulumi.runtime.registerResourceModule("linode", "index/databasePostgresqlV2", _module);
pulumi.runtime.registerResourceModule("linode", "index/domain", _module);
pulumi.runtime.registerResourceModule("linode", "index/domainRecord", _module);
pulumi.runtime.registerResourceModule("linode", "index/firewall", _module);
pulumi.runtime.registerResourceModule("linode", "index/firewallDevice", _module);
pulumi.runtime.registerResourceModule("linode", "index/image", _module);
pulumi.runtime.registerResourceModule("linode", "index/instance", _module);
pulumi.runtime.registerResourceModule("linode", "index/instanceConfig", _module);
pulumi.runtime.registerResourceModule("linode", "index/instanceDisk", _module);
pulumi.runtime.registerResourceModule("linode", "index/instanceIp", _module);
pulumi.runtime.registerResourceModule("linode", "index/instanceSharedIps", _module);
pulumi.runtime.registerResourceModule("linode", "index/ipv6Range", _module);
pulumi.runtime.registerResourceModule("linode", "index/lkeCluster", _module);
pulumi.runtime.registerResourceModule("linode", "index/lkeNodePool", _module);
pulumi.runtime.registerResourceModule("linode", "index/networkingIp", _module);
pulumi.runtime.registerResourceModule("linode", "index/networkingIpAssignment", _module);
pulumi.runtime.registerResourceModule("linode", "index/nodeBalancer", _module);
pulumi.runtime.registerResourceModule("linode", "index/nodeBalancerConfig", _module);
pulumi.runtime.registerResourceModule("linode", "index/nodeBalancerNode", _module);
pulumi.runtime.registerResourceModule("linode", "index/objectStorageBucket", _module);
pulumi.runtime.registerResourceModule("linode", "index/objectStorageKey", _module);
pulumi.runtime.registerResourceModule("linode", "index/objectStorageObject", _module);
pulumi.runtime.registerResourceModule("linode", "index/placementGroup", _module);
pulumi.runtime.registerResourceModule("linode", "index/placementGroupAssignment", _module);
pulumi.runtime.registerResourceModule("linode", "index/rdns", _module);
pulumi.runtime.registerResourceModule("linode", "index/reservedIpAssignment", _module);
pulumi.runtime.registerResourceModule("linode", "index/sshKey", _module);
pulumi.runtime.registerResourceModule("linode", "index/stackScript", _module);
pulumi.runtime.registerResourceModule("linode", "index/token", _module);
pulumi.runtime.registerResourceModule("linode", "index/user", _module);
pulumi.runtime.registerResourceModule("linode", "index/volume", _module);
pulumi.runtime.registerResourceModule("linode", "index/vpc", _module);
pulumi.runtime.registerResourceModule("linode", "index/vpcSubnet", _module);
pulumi.runtime.registerResourcePackage("linode", {
    version: utilities.getVersion(),
    constructProvider: (name, type, urn) => {
        if (type !== "pulumi:providers:linode") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new provider_1.Provider(name, undefined, { urn });
    },
});
//# sourceMappingURL=index.js.map