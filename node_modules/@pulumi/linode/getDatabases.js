"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDatabasesOutput = exports.getDatabases = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Provides information about Linode Managed Databases that match a set of filters.
 * For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-databases-instances).
 *
 * ## Example Usage
 *
 * Get information about all Linode Managed Databases:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as linode from "@pulumi/linode";
 *
 * const all = linode.getDatabases({});
 * export const databaseIds = all.then(all => all.databases.map(__item => __item.id));
 * ```
 *
 * Get information about all Linode MySQL Databases:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as linode from "@pulumi/linode";
 *
 * const mysql = linode.getDatabases({
 *     filters: [{
 *         name: "engine",
 *         values: ["mysql"],
 *     }],
 * });
 * export const databaseIds = mysql.then(mysql => mysql.databases.map(__item => __item.id));
 * ```
 *
 * ## privateNetwork
 *
 * The following arguments are exposed by the `privateNetwork` attribute:
 *
 * * `vpcId` - The ID of the virtual private cloud (VPC) to restrict access to this database using.
 *
 * * `subnetId` - The ID of the VPC subnet to restrict access to this database using.
 *
 * * `publicAccess` - If true, clients outside the VPC can connect to the database using a public IP address.
 */
function getDatabases(args, opts) {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("linode:index/getDatabases:getDatabases", {
        "databases": args.databases,
        "filters": args.filters,
        "order": args.order,
        "orderBy": args.orderBy,
    }, opts);
}
exports.getDatabases = getDatabases;
/**
 * Provides information about Linode Managed Databases that match a set of filters.
 * For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-databases-instances).
 *
 * ## Example Usage
 *
 * Get information about all Linode Managed Databases:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as linode from "@pulumi/linode";
 *
 * const all = linode.getDatabases({});
 * export const databaseIds = all.then(all => all.databases.map(__item => __item.id));
 * ```
 *
 * Get information about all Linode MySQL Databases:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as linode from "@pulumi/linode";
 *
 * const mysql = linode.getDatabases({
 *     filters: [{
 *         name: "engine",
 *         values: ["mysql"],
 *     }],
 * });
 * export const databaseIds = mysql.then(mysql => mysql.databases.map(__item => __item.id));
 * ```
 *
 * ## privateNetwork
 *
 * The following arguments are exposed by the `privateNetwork` attribute:
 *
 * * `vpcId` - The ID of the virtual private cloud (VPC) to restrict access to this database using.
 *
 * * `subnetId` - The ID of the VPC subnet to restrict access to this database using.
 *
 * * `publicAccess` - If true, clients outside the VPC can connect to the database using a public IP address.
 */
function getDatabasesOutput(args, opts) {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("linode:index/getDatabases:getDatabases", {
        "databases": args.databases,
        "filters": args.filters,
        "order": args.order,
        "orderBy": args.orderBy,
    }, opts);
}
exports.getDatabasesOutput = getDatabasesOutput;
//# sourceMappingURL=getDatabases.js.map