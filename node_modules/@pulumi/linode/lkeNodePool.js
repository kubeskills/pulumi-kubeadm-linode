"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.LkeNodePool = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## Import
 *
 * LKE Node Pools can be imported using the `cluster_id,id`, e.g.
 *
 * ```sh
 * $ pulumi import linode:index/lkeNodePool:LkeNodePool my_pool 150003,12345
 * ```
 */
class LkeNodePool extends pulumi.CustomResource {
    /**
     * Get an existing LkeNodePool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new LkeNodePool(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of LkeNodePool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LkeNodePool.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["autoscaler"] = state?.autoscaler;
            resourceInputs["clusterId"] = state?.clusterId;
            resourceInputs["diskEncryption"] = state?.diskEncryption;
            resourceInputs["k8sVersion"] = state?.k8sVersion;
            resourceInputs["label"] = state?.label;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["nodeCount"] = state?.nodeCount;
            resourceInputs["nodes"] = state?.nodes;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["taints"] = state?.taints;
            resourceInputs["type"] = state?.type;
            resourceInputs["updateStrategy"] = state?.updateStrategy;
        }
        else {
            const args = argsOrState;
            if (args?.clusterId === undefined && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["autoscaler"] = args?.autoscaler;
            resourceInputs["clusterId"] = args?.clusterId;
            resourceInputs["k8sVersion"] = args?.k8sVersion;
            resourceInputs["label"] = args?.label;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["nodeCount"] = args?.nodeCount;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["taints"] = args?.taints;
            resourceInputs["type"] = args?.type;
            resourceInputs["updateStrategy"] = args?.updateStrategy;
            resourceInputs["diskEncryption"] = undefined /*out*/;
            resourceInputs["nodes"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LkeNodePool.__pulumiType, name, resourceInputs, opts);
    }
}
exports.LkeNodePool = LkeNodePool;
/** @internal */
LkeNodePool.__pulumiType = 'linode:index/lkeNodePool:LkeNodePool';
//# sourceMappingURL=lkeNodePool.js.map