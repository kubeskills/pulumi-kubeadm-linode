"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.LkeCluster = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## Import
 *
 * LKE Clusters can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import linode:index/lkeCluster:LkeCluster my_cluster 12345
 * ```
 */
class LkeCluster extends pulumi.CustomResource {
    /**
     * Get an existing LkeCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new LkeCluster(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of LkeCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LkeCluster.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["apiEndpoints"] = state?.apiEndpoints;
            resourceInputs["aplEnabled"] = state?.aplEnabled;
            resourceInputs["controlPlane"] = state?.controlPlane;
            resourceInputs["dashboardUrl"] = state?.dashboardUrl;
            resourceInputs["externalPoolTags"] = state?.externalPoolTags;
            resourceInputs["k8sVersion"] = state?.k8sVersion;
            resourceInputs["kubeconfig"] = state?.kubeconfig;
            resourceInputs["label"] = state?.label;
            resourceInputs["pools"] = state?.pools;
            resourceInputs["region"] = state?.region;
            resourceInputs["stackType"] = state?.stackType;
            resourceInputs["status"] = state?.status;
            resourceInputs["subnetId"] = state?.subnetId;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tier"] = state?.tier;
            resourceInputs["vpcId"] = state?.vpcId;
        }
        else {
            const args = argsOrState;
            if (args?.k8sVersion === undefined && !opts.urn) {
                throw new Error("Missing required property 'k8sVersion'");
            }
            if (args?.label === undefined && !opts.urn) {
                throw new Error("Missing required property 'label'");
            }
            if (args?.pools === undefined && !opts.urn) {
                throw new Error("Missing required property 'pools'");
            }
            if (args?.region === undefined && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            resourceInputs["aplEnabled"] = args?.aplEnabled;
            resourceInputs["controlPlane"] = args?.controlPlane;
            resourceInputs["externalPoolTags"] = args?.externalPoolTags;
            resourceInputs["k8sVersion"] = args?.k8sVersion;
            resourceInputs["label"] = args?.label;
            resourceInputs["pools"] = args?.pools;
            resourceInputs["region"] = args?.region;
            resourceInputs["stackType"] = args?.stackType;
            resourceInputs["subnetId"] = args?.subnetId;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["tier"] = args?.tier;
            resourceInputs["vpcId"] = args?.vpcId;
            resourceInputs["apiEndpoints"] = undefined /*out*/;
            resourceInputs["dashboardUrl"] = undefined /*out*/;
            resourceInputs["kubeconfig"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["kubeconfig"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(LkeCluster.__pulumiType, name, resourceInputs, opts);
    }
}
exports.LkeCluster = LkeCluster;
/** @internal */
LkeCluster.__pulumiType = 'linode:index/lkeCluster:LkeCluster';
//# sourceMappingURL=lkeCluster.js.map