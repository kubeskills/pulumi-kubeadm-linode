"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRegionsOutput = exports.getRegions = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Provides information about Linode regions that match a set of filters.
 * For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-regions).
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as linode from "@pulumi/linode";
 *
 * const filtered_regions = linode.getRegions({
 *     filters: [
 *         {
 *             name: "status",
 *             values: ["ok"],
 *         },
 *         {
 *             name: "capabilities",
 *             values: ["NodeBalancers"],
 *         },
 *     ],
 * });
 * export const regions = filtered_regions.then(filtered_regions => filtered_regions.regions);
 * ```
 *
 * ## Filterable Fields
 *
 * * `status`
 *
 * * `country`
 *
 * * `capabilities`
 *
 * * `siteType`
 */
function getRegions(args, opts) {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("linode:index/getRegions:getRegions", {
        "filters": args.filters,
        "regions": args.regions,
    }, opts);
}
exports.getRegions = getRegions;
/**
 * Provides information about Linode regions that match a set of filters.
 * For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-regions).
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as linode from "@pulumi/linode";
 *
 * const filtered_regions = linode.getRegions({
 *     filters: [
 *         {
 *             name: "status",
 *             values: ["ok"],
 *         },
 *         {
 *             name: "capabilities",
 *             values: ["NodeBalancers"],
 *         },
 *     ],
 * });
 * export const regions = filtered_regions.then(filtered_regions => filtered_regions.regions);
 * ```
 *
 * ## Filterable Fields
 *
 * * `status`
 *
 * * `country`
 *
 * * `capabilities`
 *
 * * `siteType`
 */
function getRegionsOutput(args, opts) {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("linode:index/getRegions:getRegions", {
        "filters": args.filters,
        "regions": args.regions,
    }, opts);
}
exports.getRegionsOutput = getRegionsOutput;
//# sourceMappingURL=getRegions.js.map