"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.SshKey = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Provides a Linode SSH Key resource.  This can be used to create, modify, and delete Linodes SSH Keys.  Managed SSH Keys allow instances to be created with a list of Linode usernames, whose SSH keys will be automatically applied to the root account's `~/.ssh/authorized_keys` file.
 * For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-ssh-keys).
 *
 * **NOTE**: This does not generate a new ssh key, you must have an existing key generated and saved locally.
 *
 * ## Example Usage
 *
 * The following example shows how one might use this resource to configure a SSH Key for access to a Linode Instance.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as linode from "@pulumi/linode";
 * import * as std from "@pulumi/std";
 *
 * const foo = new linode.SshKey("foo", {
 *     label: "foo",
 *     sshKey: std.file({
 *         input: "~/.ssh/id_rsa.pub",
 *     }).then(invoke => std.chomp({
 *         input: invoke.result,
 *     })).then(invoke => invoke.result),
 * });
 * const fooInstance = new linode.Instance("foo", {
 *     image: "linode/ubuntu22.04",
 *     label: "foo",
 *     region: "us-east",
 *     type: "g6-nanode-1",
 *     authorizedKeys: [foo.sshKey],
 *     rootPass: "...",
 * });
 * ```
 *
 * ## Import
 *
 * Linodes SSH Keys can be imported using the Linode SSH Key `id`, e.g.
 *
 * ```sh
 * $ pulumi import linode:index/sshKey:SshKey mysshkey 1234567
 * ```
 */
class SshKey extends pulumi.CustomResource {
    /**
     * Get an existing SshKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new SshKey(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of SshKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SshKey.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["created"] = state?.created;
            resourceInputs["label"] = state?.label;
            resourceInputs["sshKey"] = state?.sshKey;
        }
        else {
            const args = argsOrState;
            if (args?.label === undefined && !opts.urn) {
                throw new Error("Missing required property 'label'");
            }
            if (args?.sshKey === undefined && !opts.urn) {
                throw new Error("Missing required property 'sshKey'");
            }
            resourceInputs["label"] = args?.label;
            resourceInputs["sshKey"] = args?.sshKey;
            resourceInputs["created"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SshKey.__pulumiType, name, resourceInputs, opts);
    }
}
exports.SshKey = SshKey;
/** @internal */
SshKey.__pulumiType = 'linode:index/sshKey:SshKey';
//# sourceMappingURL=sshKey.js.map